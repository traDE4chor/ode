/*
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.trade.client.jersey.api;

import io.swagger.trade.client.jersey.ApiException;
import io.swagger.trade.client.jersey.model.DataModel;
import io.swagger.trade.client.jersey.model.DataModelArrayWithLinks;
import io.swagger.trade.client.jersey.model.DataModelData;
import io.swagger.trade.client.jersey.model.DataModelWithLinks;
import io.swagger.trade.client.jersey.model.Error;
import io.swagger.trade.client.jersey.model.InvalidInput;
import io.swagger.trade.client.jersey.model.NotFound;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataModelApi
 */
@Ignore
public class DataModelApiTest {

    private final DataModelApi api = new DataModelApi();

    
    /**
     * Creates and adds a new data model to the TraDE middleware
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDataModelTest() throws ApiException {
        DataModelData dataModelData = null;
        DataModel response = api.addDataModel(dataModelData);

        // TODO: test validations
    }
    
    /**
     * Deletes a data model and all related resources.
     *
     * Deletes a data model and all resources related to it from the TraDE middleware. This means that all data objects and their data elements defined through this data model as well as their instances will be deleted. Therefore, the deletion of a data model should be handled with care since it is one of the core artifacts used by the TraDE middleware.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDataModelTest() throws ApiException {
        String dataModelId = null;
        api.deleteDataModel(dataModelId);

        // TODO: test validations
    }
    
    /**
     * Provides the serialized data model
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadDataModelTest() throws ApiException {
        String dataModelId = null;
        byte[] response = api.downloadDataModel(dataModelId);

        // TODO: test validations
    }
    
    /**
     * Get the data model associated to the data dependency graph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataModelTest() throws ApiException {
        String graphId = null;
        DataModelWithLinks response = api.getDataModel(graphId);

        // TODO: test validations
    }
    
    /**
     * Find a data model by Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataModelDirectlyTest() throws ApiException {
        String dataModelId = null;
        DataModelWithLinks response = api.getDataModelDirectly(dataModelId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all available &#x60;DataModel&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data model resources and param **targetNamespace**, **name** and **entity** filter result list by name, targetNamespace and entity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataModelsTest() throws ApiException {
        Integer start = null;
        Integer size = null;
        String targetNamespace = null;
        String name = null;
        String entity = null;
        DataModelArrayWithLinks response = api.getDataModels(start, size, targetNamespace, name, entity);

        // TODO: test validations
    }
    
    /**
     * Associates an existing dataModel to the data dependency graph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDataModelTest() throws ApiException {
        String graphId = null;
        String dataModelId = null;
        api.setDataModel(graphId, dataModelId);

        // TODO: test validations
    }
    
    /**
     * Upload a serialized data model to the TraDE middleware in order to make it available.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadDataModelTest() throws ApiException {
        String dataModelId = null;
        Long contentLength = null;
        byte[] model = null;
        api.uploadDataModel(dataModelId, contentLength, model);

        // TODO: test validations
    }
    
}
