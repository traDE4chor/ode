/*
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.trade.client.jersey.api;

import io.swagger.trade.client.jersey.ApiException;
import io.swagger.trade.client.jersey.model.DataObject;
import io.swagger.trade.client.jersey.model.DataObjectArrayWithLinks;
import io.swagger.trade.client.jersey.model.DataObjectData;
import io.swagger.trade.client.jersey.model.DataObjectWithLinks;
import io.swagger.trade.client.jersey.model.Error;
import io.swagger.trade.client.jersey.model.InvalidInput;
import io.swagger.trade.client.jersey.model.NotFound;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataObjectApi
 */
@Ignore
public class DataObjectApiTest {

    private final DataObjectApi api = new DataObjectApi();

    
    /**
     * Creates and adds a new data object to the TraDE middleware
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDataObjectTest() throws ApiException {
        DataObjectData dataObjectData = null;
        DataObject response = api.addDataObject(dataObjectData);

        // TODO: test validations
    }
    
    /**
     * Deletes a dataObject. If the dataObject belongs to a dataModel the delete request will be rejected, since data models are immutable resources.
     *
     * Deletes a complete data object and its referenced data elements as well as all instances of conntected to both the data object and its data elements from the TraDE middleware
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDataObjectTest() throws ApiException {
        String dataObjectId = null;
        api.deleteDataObject(dataObjectId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all available &#x60;DataObject&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data object resources, params **name** and **entity** filter result list by name and entity and param **status** filters result list by status of the data objects.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllDataObjectsTest() throws ApiException {
        Integer start = null;
        Integer size = null;
        String name = null;
        String entity = null;
        String status = null;
        DataObjectArrayWithLinks response = api.getAllDataObjects(start, size, name, entity, status);

        // TODO: test validations
    }
    
    /**
     * Find a data object by Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataObjectByIdTest() throws ApiException {
        String dataObjectId = null;
        DataObjectWithLinks response = api.getDataObjectById(dataObjectId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all &#x60;DataObject&#x60; resources which belong the data model. Optional query parameter of **start** and **size** enable pagination of the collection of data object resources.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataObjectsTest() throws ApiException {
        String dataModelId = null;
        Integer start = null;
        Integer size = null;
        DataObjectArrayWithLinks response = api.getDataObjects(dataModelId, start, size);

        // TODO: test validations
    }
    
    /**
     * Update an existing dataObject. If the dataObject belongs to a dataModel the update request will be rejected, since data models are immutable resources.
     *
     * Update an existing dataObject
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDataObjectTest() throws ApiException {
        String dataObjectId = null;
        DataObject dataObject = null;
        DataObjectWithLinks response = api.updateDataObject(dataObjectId, dataObject);

        // TODO: test validations
    }
    
}
