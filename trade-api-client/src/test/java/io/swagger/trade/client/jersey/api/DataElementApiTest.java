/*
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.trade.client.jersey.api;

import io.swagger.trade.client.jersey.ApiException;
import io.swagger.trade.client.jersey.model.DataElement;
import io.swagger.trade.client.jersey.model.DataElementArrayWithLinks;
import io.swagger.trade.client.jersey.model.DataElementData;
import io.swagger.trade.client.jersey.model.DataElementWithLinks;
import io.swagger.trade.client.jersey.model.Error;
import io.swagger.trade.client.jersey.model.InvalidInput;
import io.swagger.trade.client.jersey.model.NotFound;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataElementApi
 */
@Ignore
public class DataElementApiTest {

    private final DataElementApi api = new DataElementApi();

    
    /**
     * Add a new dataElement to the dataObject. If the dataObject belongs to a dataModel the create request will be rejected, since data models are immutable resources.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDataElementTest() throws ApiException {
        String dataObjectId = null;
        DataElementData dataElementData = null;
        DataElementWithLinks response = api.addDataElement(dataObjectId, dataElementData);

        // TODO: test validations
    }
    
    /**
     * Deletes a data element. If the parent dataObject belongs to a dataModel the update request will be rejected, since data models are immutable resources.
     *
     * Deletes a complete data element and its referenced instances from the TraDE middleware
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDataElementTest() throws ApiException {
        String dataElementId = null;
        api.deleteDataElement(dataElementId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all available &#x60;DataElement&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element resources, param **name** filters result list by name and param **status** filters result list by status of the data elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllDataElementsTest() throws ApiException {
        Integer start = null;
        Integer size = null;
        String name = null;
        String status = null;
        DataElementArrayWithLinks response = api.getAllDataElements(start, size, name, status);

        // TODO: test validations
    }
    
    /**
     * Find a data element by Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataElementDirectlyTest() throws ApiException {
        String dataElementId = null;
        DataElementWithLinks response = api.getDataElementDirectly(dataElementId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all available &#x60;DataElement&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element resources, param **name** filters result list by name and param **status** filters result list by status of the data elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataElementsTest() throws ApiException {
        String dataObjectId = null;
        Integer start = null;
        Integer size = null;
        String name = null;
        String status = null;
        DataElementArrayWithLinks response = api.getDataElements(dataObjectId, start, size, name, status);

        // TODO: test validations
    }
    
    /**
     * Update an existing data element. If the parent dataObject belongs to a dataModel the update request will be rejected, since data models are immutable resources.
     *
     * Update an existing data element
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDataElementTest() throws ApiException {
        String dataElementId = null;
        DataElement dataElement = null;
        DataElementWithLinks response = api.updateDataElement(dataElementId, dataElement);

        // TODO: test validations
    }
    
}
