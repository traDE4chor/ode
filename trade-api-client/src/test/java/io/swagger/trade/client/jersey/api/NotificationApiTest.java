/*
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.trade.client.jersey.api;

import io.swagger.trade.client.jersey.ApiException;
import io.swagger.trade.client.jersey.model.Error;
import io.swagger.trade.client.jersey.model.InvalidInput;
import io.swagger.trade.client.jersey.model.NotFound;
import io.swagger.trade.client.jersey.model.Notification;
import io.swagger.trade.client.jersey.model.NotificationArrayWithLinks;
import io.swagger.trade.client.jersey.model.NotificationData;
import io.swagger.trade.client.jersey.model.NotificationWithLinks;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationApi
 */
@Ignore
public class NotificationApiTest {

    private final NotificationApi api = new NotificationApi();

    
    /**
     * Creates and adds a new notification to the TraDE middleware
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addNotificationTest() throws ApiException {
        NotificationData notificationData = null;
        Notification response = api.addNotification(notificationData);

        // TODO: test validations
    }
    
    /**
     * Deletes a notification
     *
     * Deletes a notification from the TraDE middleware.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotificationTest() throws ApiException {
        String notificationId = null;
        api.deleteNotification(notificationId);

        // TODO: test validations
    }
    
    /**
     * Find a notification by Id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationDirectlyTest() throws ApiException {
        String notificationId = null;
        NotificationWithLinks response = api.getNotificationDirectly(notificationId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Gets all available &#x60;Notification&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of notification resources, param **name** filters result list by the name and param **notifierServiceId** filters result list by the associated notifier service of the notification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationsTest() throws ApiException {
        Integer start = null;
        Integer size = null;
        String name = null;
        String notifierServiceId = null;
        NotificationArrayWithLinks response = api.getNotifications(start, size, name, notifierServiceId);

        // TODO: test validations
    }
    
    /**
     * Update an existing notification
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotificationDirectlyTest() throws ApiException {
        String notificationId = null;
        Notification notification = null;
        NotificationWithLinks response = api.updateNotificationDirectly(notificationId, notification);

        // TODO: test validations
    }
    
}
