/*
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.swagger.trade.client.jersey.api;

import io.swagger.trade.client.jersey.ApiClient;
import io.swagger.trade.client.jersey.ApiException;
import io.swagger.trade.client.jersey.Configuration;
import io.swagger.trade.client.jersey.Pair;
import io.swagger.trade.client.jersey.model.DataElement;
import io.swagger.trade.client.jersey.model.DataElementArrayWithLinks;
import io.swagger.trade.client.jersey.model.DataElementData;
import io.swagger.trade.client.jersey.model.DataElementWithLinks;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ws.rs.core.GenericType;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-05T17:17:13.418+02:00")
public class DataElementApi {
  private ApiClient apiClient;

  public DataElementApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DataElementApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Add a new dataElement to the dataObject. If the dataObject belongs to a dataModel the create request will be rejected, since data models are immutable resources.
   * 
   * @param dataObjectId Id of the data object that needs to be fetched (required)
   * @param dataElementData The name and creating entity of the data element that will be created. (required)
   * @return DataElementWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataElementWithLinks addDataElement(String dataObjectId, DataElementData dataElementData) throws ApiException {
    Object localVarPostBody = dataElementData;
    
    // verify the required parameter 'dataObjectId' is set
    if (dataObjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataObjectId' when calling addDataElement");
    }
    
    // verify the required parameter 'dataElementData' is set
    if (dataElementData == null) {
      throw new ApiException(400, "Missing the required parameter 'dataElementData' when calling addDataElement");
    }
    
    // create path and map variables
    String localVarPath = "/dataObjects/{dataObjectId}/dataElements"
      .replaceAll("\\{" + "dataObjectId" + "\\}", apiClient.escapeString(dataObjectId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataElementWithLinks> localVarReturnType = new GenericType<DataElementWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Deletes a data element. If the parent dataObject belongs to a dataModel the update request will be rejected, since data models are immutable resources.
   * Deletes a complete data element and its referenced instances from the TraDE middleware
   * @param dataElementId Id of the data element that needs to be deleted (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteDataElement(String dataElementId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'dataElementId' is set
    if (dataElementId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataElementId' when calling deleteDataElement");
    }
    
    // create path and map variables
    String localVarPath = "/dataElements/{dataElementId}"
      .replaceAll("\\{" + "dataElementId" + "\\}", apiClient.escapeString(dataElementId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * 
   * Gets all available &#x60;DataElement&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element resources, param **name** filters result list by name and param **status** filters result list by status of the data elements.
   * @param start Start index of returned collection of resources for pagination. (optional, default to 1)
   * @param size Size of the returned sub-collection of resources for pagination. (optional, default to 50)
   * @param name Name of data elements to return (optional)
   * @param status Status of data elements to return (optional)
   * @return DataElementArrayWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataElementArrayWithLinks getAllDataElements(Integer start, Integer size, String name, String status) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/dataElements";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataElementArrayWithLinks> localVarReturnType = new GenericType<DataElementArrayWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Find a data element by Id
   * 
   * @param dataElementId Id of the data element that needs to be fetched (required)
   * @return DataElementWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataElementWithLinks getDataElementDirectly(String dataElementId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'dataElementId' is set
    if (dataElementId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataElementId' when calling getDataElementDirectly");
    }
    
    // create path and map variables
    String localVarPath = "/dataElements/{dataElementId}"
      .replaceAll("\\{" + "dataElementId" + "\\}", apiClient.escapeString(dataElementId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataElementWithLinks> localVarReturnType = new GenericType<DataElementWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Gets all available &#x60;DataElement&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element resources, param **name** filters result list by name and param **status** filters result list by status of the data elements.
   * @param dataObjectId Id of the data object that needs to be fetched (required)
   * @param start Start index of returned collection of resources for pagination. (optional, default to 1)
   * @param size Size of the returned sub-collection of resources for pagination. (optional, default to 50)
   * @param name Name of data elements to return (optional)
   * @param status Status of data elements to return (optional)
   * @return DataElementArrayWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataElementArrayWithLinks getDataElements(String dataObjectId, Integer start, Integer size, String name, String status) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'dataObjectId' is set
    if (dataObjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataObjectId' when calling getDataElements");
    }
    
    // create path and map variables
    String localVarPath = "/dataObjects/{dataObjectId}/dataElements"
      .replaceAll("\\{" + "dataObjectId" + "\\}", apiClient.escapeString(dataObjectId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataElementArrayWithLinks> localVarReturnType = new GenericType<DataElementArrayWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update an existing data element. If the parent dataObject belongs to a dataModel the update request will be rejected, since data models are immutable resources.
   * Update an existing data element
   * @param dataElementId Id of the data element that needs to be fetched (required)
   * @param dataElement The updated data element resource. Only changes to the following fields are reflected **name**, **type** and **contentType**. All other changes are ignored since the corresponding fields of the resource are internally set by the server or are immutable. (required)
   * @return DataElementWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataElementWithLinks updateDataElement(String dataElementId, DataElement dataElement) throws ApiException {
    Object localVarPostBody = dataElement;
    
    // verify the required parameter 'dataElementId' is set
    if (dataElementId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataElementId' when calling updateDataElement");
    }
    
    // verify the required parameter 'dataElement' is set
    if (dataElement == null) {
      throw new ApiException(400, "Missing the required parameter 'dataElement' when calling updateDataElement");
    }
    
    // create path and map variables
    String localVarPath = "/dataElements/{dataElementId}"
      .replaceAll("\\{" + "dataElementId" + "\\}", apiClient.escapeString(dataElementId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataElementWithLinks> localVarReturnType = new GenericType<DataElementWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
