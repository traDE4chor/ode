/*
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.swagger.trade.client.jersey.api;

import io.swagger.trade.client.jersey.ApiClient;
import io.swagger.trade.client.jersey.ApiException;
import io.swagger.trade.client.jersey.Configuration;
import io.swagger.trade.client.jersey.Pair;
import io.swagger.trade.client.jersey.model.DataObject;
import io.swagger.trade.client.jersey.model.DataObjectArrayWithLinks;
import io.swagger.trade.client.jersey.model.DataObjectData;
import io.swagger.trade.client.jersey.model.DataObjectWithLinks;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ws.rs.core.GenericType;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-05T17:17:13.418+02:00")
public class DataObjectApi {
  private ApiClient apiClient;

  public DataObjectApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DataObjectApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Creates and adds a new data object to the TraDE middleware
   * 
   * @param dataObjectData The name and creating entity of the data object that will be created. (required)
   * @return DataObject
   * @throws ApiException if fails to make API call
   */
  public DataObject addDataObject(DataObjectData dataObjectData) throws ApiException {
    Object localVarPostBody = dataObjectData;
    
    // verify the required parameter 'dataObjectData' is set
    if (dataObjectData == null) {
      throw new ApiException(400, "Missing the required parameter 'dataObjectData' when calling addDataObject");
    }
    
    // create path and map variables
    String localVarPath = "/dataObjects";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataObject> localVarReturnType = new GenericType<DataObject>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Deletes a dataObject. If the dataObject belongs to a dataModel the delete request will be rejected, since data models are immutable resources.
   * Deletes a complete data object and its referenced data elements as well as all instances of conntected to both the data object and its data elements from the TraDE middleware
   * @param dataObjectId Id of the data object that needs to be fetched (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteDataObject(String dataObjectId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'dataObjectId' is set
    if (dataObjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataObjectId' when calling deleteDataObject");
    }
    
    // create path and map variables
    String localVarPath = "/dataObjects/{dataObjectId}"
      .replaceAll("\\{" + "dataObjectId" + "\\}", apiClient.escapeString(dataObjectId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * 
   * Gets all available &#x60;DataObject&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data object resources, params **name** and **entity** filter result list by name and entity and param **status** filters result list by status of the data objects.
   * @param start Start index of returned collection of resources for pagination. (optional, default to 1)
   * @param size Size of the returned sub-collection of resources for pagination. (optional, default to 50)
   * @param name Name of data objects to return (optional)
   * @param entity Creating entity of data dependency graph to return (optional)
   * @param status Status of data objects to return (optional)
   * @return DataObjectArrayWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataObjectArrayWithLinks getAllDataObjects(Integer start, Integer size, String name, String entity, String status) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/dataObjects";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "entity", entity));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataObjectArrayWithLinks> localVarReturnType = new GenericType<DataObjectArrayWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Find a data object by Id
   * 
   * @param dataObjectId Id of the data object that needs to be fetched (required)
   * @return DataObjectWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataObjectWithLinks getDataObjectById(String dataObjectId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'dataObjectId' is set
    if (dataObjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataObjectId' when calling getDataObjectById");
    }
    
    // create path and map variables
    String localVarPath = "/dataObjects/{dataObjectId}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "dataObjectId" + "\\}", apiClient.escapeString(dataObjectId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataObjectWithLinks> localVarReturnType = new GenericType<DataObjectWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Gets all &#x60;DataObject&#x60; resources which belong the data model. Optional query parameter of **start** and **size** enable pagination of the collection of data object resources.
   * @param dataModelId Id of the data model that needs to be fetched (required)
   * @param start Start index of returned collection of resources for pagination. (optional, default to 1)
   * @param size Size of the returned sub-collection of resources for pagination. (optional, default to 50)
   * @return DataObjectArrayWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataObjectArrayWithLinks getDataObjects(String dataModelId, Integer start, Integer size) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'dataModelId' is set
    if (dataModelId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataModelId' when calling getDataObjects");
    }
    
    // create path and map variables
    String localVarPath = "/dataModels/{dataModelId}/dataObjects".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "dataModelId" + "\\}", apiClient.escapeString(dataModelId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataObjectArrayWithLinks> localVarReturnType = new GenericType<DataObjectArrayWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Update an existing dataObject. If the dataObject belongs to a dataModel the update request will be rejected, since data models are immutable resources.
   * Update an existing dataObject
   * @param dataObjectId Id of the data object that needs to be updated (required)
   * @param dataObject The updated data object resource. Only changes to the following fields are reflected **name** and creating **entity**. All other changes are ignored since the corresponding fields of the resource are internally set by the server or are immutable. (required)
   * @return DataObjectWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataObjectWithLinks updateDataObject(String dataObjectId, DataObject dataObject) throws ApiException {
    Object localVarPostBody = dataObject;
    
    // verify the required parameter 'dataObjectId' is set
    if (dataObjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataObjectId' when calling updateDataObject");
    }
    
    // verify the required parameter 'dataObject' is set
    if (dataObject == null) {
      throw new ApiException(400, "Missing the required parameter 'dataObject' when calling updateDataObject");
    }
    
    // create path and map variables
    String localVarPath = "/dataObjects/{dataObjectId}".replaceAll("\\{format\\}","json")
      .replaceAll("\\{" + "dataObjectId" + "\\}", apiClient.escapeString(dataObjectId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataObjectWithLinks> localVarReturnType = new GenericType<DataObjectWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
