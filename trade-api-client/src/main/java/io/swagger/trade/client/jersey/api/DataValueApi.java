/*
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.swagger.trade.client.jersey.api;

import io.swagger.trade.client.jersey.ApiClient;
import io.swagger.trade.client.jersey.ApiException;
import io.swagger.trade.client.jersey.Configuration;
import io.swagger.trade.client.jersey.Pair;
import io.swagger.trade.client.jersey.model.DataValue;
import io.swagger.trade.client.jersey.model.DataValueArrayWithLinks;
import io.swagger.trade.client.jersey.model.DataValueData;
import io.swagger.trade.client.jersey.model.DataValueWithLinks;
import io.swagger.trade.client.jersey.model.Error;
import io.swagger.trade.client.jersey.model.InvalidInput;
import io.swagger.trade.client.jersey.model.NotFound;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ws.rs.core.GenericType;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-05T17:17:13.418+02:00")
public class DataValueApi {
  private ApiClient apiClient;

  public DataValueApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DataValueApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Creates and adds a new data value to the TraDE middleware
   * 
   * @param dataValueData The name, type and who created the data value are required. The specification of a contentType is only required if the data type is binary. (required)
   * @return DataValue
   * @throws ApiException if fails to make API call
   */
  public DataValue addDataValue(DataValueData dataValueData) throws ApiException {
    Object localVarPostBody = dataValueData;
    
    // verify the required parameter 'dataValueData' is set
    if (dataValueData == null) {
      throw new ApiException(400, "Missing the required parameter 'dataValueData' when calling addDataValue");
    }
    
    // create path and map variables
    String localVarPath = "/dataValues";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataValue> localVarReturnType = new GenericType<DataValue>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  
  /**
   * Creates a new or associates an existing dataValue to the data element instance.
   * 
   * @param instanceId Id of the data element instance that needs to be fetched (required)
   * @param dataValueData DataValue object that needs to be created or associated. In case of updating the associated data value providing the Id is enough. To create and associate a new DataValue, a name, type and who created the data value are required. The specification of a contentType is only required if the data type of the data value is binary. (optional)
   * @return DataValueWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataValueWithLinks associateDataValueToDataElementInstance(String instanceId, DataValue dataValueData) throws ApiException {
    Object localVarPostBody = dataValueData;
    
    // verify the required parameter 'instanceId' is set
    if (instanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceId' when calling associateDataValueToDataElementInstance");
    }
    
    // create path and map variables
    String localVarPath = "/dataElementInstances/{instanceId}/dataValues"
      .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataValueWithLinks> localVarReturnType = new GenericType<DataValueWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Deletes a data value
   * Deletes a data value and its associated data from the TraDE middleware. All references from data element instances are invalidated accordingly.
   * @param dataValueId Id of the data value that needs to be fetched (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteDataValue(String dataValueId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'dataValueId' is set
    if (dataValueId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataValueId' when calling deleteDataValue");
    }
    
    // create path and map variables
    String localVarPath = "/dataValues/{dataValueId}"
      .replaceAll("\\{" + "dataValueId" + "\\}", apiClient.escapeString(dataValueId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Find a data value by Id
   * 
   * @param dataValueId Id of the data value that needs to be fetched (required)
   * @return DataValueWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataValueWithLinks getDataValueDirectly(String dataValueId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'dataValueId' is set
    if (dataValueId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataValueId' when calling getDataValueDirectly");
    }
    
    // create path and map variables
    String localVarPath = "/dataValues/{dataValueId}"
      .replaceAll("\\{" + "dataValueId" + "\\}", apiClient.escapeString(dataValueId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataValueWithLinks> localVarReturnType = new GenericType<DataValueWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get the data value(s) associated to the data element instance.
   * Returns the complete list of &#x60;DataValue&#x60; resources associated to a &#x60;DataElementInstance&#x60; resource. With the optional query parameter **indexOfDataValue** one specific &#x60;DataValue&#x60; resource can be retrieved, if the underlying data element instance belongs to a collection data element. If the related data element is not a collection the index query parameter has no effect since at most one data value is associated to the data element instance. The current number of &#x60;DataValue&#x60; resources associated to a &#x60;DataElementInstance&#x60; resource are provided by the **numberOfDataValues** property of the &#x60;DataElementInstance&#x60; resource. The value of the query parameter **indexOfDataValue** has to be in the range of [1,**numberOfDataValues**].
   * @param instanceId Id of the data element instance that needs to be fetched (required)
   * @param indexOfDataValue The index of the associated data value to return. If the related data element is not a collection element, the index query parameter is ignored and always the single data value is returned. (optional)
   * @return DataValueArrayWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataValueArrayWithLinks getDataValues(String instanceId, Integer indexOfDataValue) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'instanceId' is set
    if (instanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceId' when calling getDataValues");
    }
    
    // create path and map variables
    String localVarPath = "/dataElementInstances/{instanceId}/dataValues"
      .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "indexOfDataValue", indexOfDataValue));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataValueArrayWithLinks> localVarReturnType = new GenericType<DataValueArrayWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Gets all available &#x60;DataValue&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data value resources, param **createdBy** filters result list by the creator and param **status** filters result list by status of the data values.
   * @param start Start index of returned collection of resources for pagination. (optional, default to 1)
   * @param size Size of the returned sub-collection of resources for pagination. (optional, default to 50)
   * @param status Status of data values to return (optional)
   * @param createdBy Name of the data element to which instance a data value belongs (optional)
   * @return DataValueArrayWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataValueArrayWithLinks getDataValuesDirectly(Integer start, Integer size, String status, String createdBy) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/dataValues";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "createdBy", createdBy));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataValueArrayWithLinks> localVarReturnType = new GenericType<DataValueArrayWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Pulls data from the data value identified by Id
   * 
   * @param dataValueId Id of the data value that needs to be fetched (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] pullDataValue(String dataValueId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'dataValueId' is set
    if (dataValueId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataValueId' when calling pullDataValue");
    }
    
    // create path and map variables
    String localVarPath = "/dataValues/{dataValueId}/data"
      .replaceAll("\\{" + "dataValueId" + "\\}", apiClient.escapeString(dataValueId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/octet-stream", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<byte[]> localVarReturnType = new GenericType<byte[]>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Pushes data to the TraDE middleware by attaching it to the data value identified by Id
   * 
   * @param dataValueId Id of the data value to attach data to (required)
   * @param data The data to push. It can be either provided directly in binary format (byte[]) or referenced through a link (http://example.org/data) where the data can be retrieved. If a link is passed, the **X-ResolveAsLinkToData** header should be set to true, to trigger the resolution of the link, else the link itself will be perceived as the data to be stored. (required)
   * @param xResolveAsLinkToData Whether the body contains the actual data (false) or a link to the data (true). (optional, default to false)
   * @param contentLength The size of the data passed as header (optional)
   * @throws ApiException if fails to make API call
   */
  public void pushDataValue(String dataValueId, byte[] data, Boolean xResolveAsLinkToData, Long contentLength) throws ApiException {
    Object localVarPostBody = data;
    
    // verify the required parameter 'dataValueId' is set
    if (dataValueId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataValueId' when calling pushDataValue");
    }
    
    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(400, "Missing the required parameter 'data' when calling pushDataValue");
    }
    
    // create path and map variables
    String localVarPath = "/dataValues/{dataValueId}/data"
      .replaceAll("\\{" + "dataValueId" + "\\}", apiClient.escapeString(dataValueId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (xResolveAsLinkToData != null)
      localVarHeaderParams.put("X-ResolveAsLinkToData", apiClient.parameterToString(xResolveAsLinkToData));
    
    if (contentLength != null)
      localVarHeaderParams.put("Content-Length", apiClient.parameterToString(contentLength));

    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/octet-stream"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Removes an associated dataValue from a data element instance.
   * 
   * @param instanceId Id of the data element instance that needs to be fetched (required)
   * @param dataValueId The id of the DataValue object that is associated and should be remove from the data element instance. (required)
   * @throws ApiException if fails to make API call
   */
  public void removeDataValueFromDataElementInstance(String instanceId, String dataValueId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'instanceId' is set
    if (instanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceId' when calling removeDataValueFromDataElementInstance");
    }
    
    // verify the required parameter 'dataValueId' is set
    if (dataValueId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataValueId' when calling removeDataValueFromDataElementInstance");
    }
    
    // create path and map variables
    String localVarPath = "/dataElementInstances/{instanceId}/dataValues/{dataValueId}"
      .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()))
      .replaceAll("\\{" + "dataValueId" + "\\}", apiClient.escapeString(dataValueId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Update an existing data value
   * 
   * @param dataValueId Id of the data value that needs to be fetched (required)
   * @param dataValue The updated data value resource. Only changes to the following fields are reflected **name**, **type** and **contentType**. All other changes are ignored since the corresponding fields of the resource are internally set by the server or are immutable. (required)
   * @return DataValueWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataValueWithLinks updateDataValueDirectly(String dataValueId, DataValue dataValue) throws ApiException {
    Object localVarPostBody = dataValue;
    
    // verify the required parameter 'dataValueId' is set
    if (dataValueId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataValueId' when calling updateDataValueDirectly");
    }
    
    // verify the required parameter 'dataValue' is set
    if (dataValue == null) {
      throw new ApiException(400, "Missing the required parameter 'dataValue' when calling updateDataValueDirectly");
    }
    
    // create path and map variables
    String localVarPath = "/dataValues/{dataValueId}"
      .replaceAll("\\{" + "dataValueId" + "\\}", apiClient.escapeString(dataValueId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataValueWithLinks> localVarReturnType = new GenericType<DataValueWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
