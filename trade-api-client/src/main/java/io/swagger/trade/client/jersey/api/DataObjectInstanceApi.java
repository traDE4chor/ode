/*
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.swagger.trade.client.jersey.api;

import io.swagger.trade.client.jersey.ApiClient;
import io.swagger.trade.client.jersey.ApiException;
import io.swagger.trade.client.jersey.Configuration;
import io.swagger.trade.client.jersey.Pair;
import io.swagger.trade.client.jersey.model.CorrelationPropertyArray;
import io.swagger.trade.client.jersey.model.DataObjectInstanceArrayWithLinks;
import io.swagger.trade.client.jersey.model.DataObjectInstanceData;
import io.swagger.trade.client.jersey.model.DataObjectInstanceWithLinks;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ws.rs.core.GenericType;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-05T17:17:13.418+02:00")
public class DataObjectInstanceApi {
  private ApiClient apiClient;

  public DataObjectInstanceApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DataObjectInstanceApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Creates a data object instance for the specified dataObject. In addition a corresponding data element instance for all data elements of the specified dataObject are created.
   * 
   * @param dataObjectId Id of the data object that needs to be fetched (required)
   * @param dataObjectInstanceData The creating entity and correlation properties of the data object instance that will be created. (required)
   * @return DataObjectInstanceWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataObjectInstanceWithLinks addDataObjectInstance(String dataObjectId, DataObjectInstanceData dataObjectInstanceData) throws ApiException {
    Object localVarPostBody = dataObjectInstanceData;
    
    // verify the required parameter 'dataObjectId' is set
    if (dataObjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataObjectId' when calling addDataObjectInstance");
    }
    
    // verify the required parameter 'dataObjectInstanceData' is set
    if (dataObjectInstanceData == null) {
      throw new ApiException(400, "Missing the required parameter 'dataObjectInstanceData' when calling addDataObjectInstance");
    }
    
    // create path and map variables
    String localVarPath = "/dataObjects/{dataObjectId}/instances"
      .replaceAll("\\{" + "dataObjectId" + "\\}", apiClient.escapeString(dataObjectId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataObjectInstanceWithLinks> localVarReturnType = new GenericType<DataObjectInstanceWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Deletes a data object instance
   * Deletes a complete data object instance and its referenced data element instances from the TraDE middleware
   * @param instanceId Id of the data object instance that needs to be fetched (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteDataObjectInstance(String instanceId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'instanceId' is set
    if (instanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceId' when calling deleteDataObjectInstance");
    }
    
    // create path and map variables
    String localVarPath = "/dataObjectInstances/{instanceId}"
      .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * 
   * Gets all available &#x60;DataObjectInstance&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data object instance resources and param **status** filters result list by status of the data object instances.
   * @param start Start index of returned collection of resources for pagination. (optional, default to 1)
   * @param size Size of the returned sub-collection of resources for pagination. (optional, default to 50)
   * @param status Status of data object instances to return (optional)
   * @return DataObjectInstanceArrayWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataObjectInstanceArrayWithLinks getAllDataObjectInstances(Integer start, Integer size, String status) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/dataObjectInstances";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataObjectInstanceArrayWithLinks> localVarReturnType = new GenericType<DataObjectInstanceArrayWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Find a data object instance by Id
   * 
   * @param instanceId Id of the data object instance that needs to be fetched (required)
   * @return DataObjectInstanceWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataObjectInstanceWithLinks getDataObjectInstance(String instanceId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'instanceId' is set
    if (instanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceId' when calling getDataObjectInstance");
    }
    
    // create path and map variables
    String localVarPath = "/dataObjectInstances/{instanceId}"
      .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataObjectInstanceWithLinks> localVarReturnType = new GenericType<DataObjectInstanceWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Gets all available &#x60;DataObjectInstance&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data object instance resources and param **status** filters result list by status of the data object instances.
   * @param dataObjectId Id of the data object that needs to be fetched (required)
   * @param start Start index of returned collection of resources for pagination. (optional, default to 1)
   * @param size Size of the returned sub-collection of resources for pagination. (optional, default to 50)
   * @param status Status of data object instances to return (optional)
   * @return DataObjectInstanceArrayWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataObjectInstanceArrayWithLinks getDataObjectInstances(String dataObjectId, Integer start, Integer size, String status) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'dataObjectId' is set
    if (dataObjectId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataObjectId' when calling getDataObjectInstances");
    }
    
    // create path and map variables
    String localVarPath = "/dataObjects/{dataObjectId}/instances"
      .replaceAll("\\{" + "dataObjectId" + "\\}", apiClient.escapeString(dataObjectId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataObjectInstanceArrayWithLinks> localVarReturnType = new GenericType<DataObjectInstanceArrayWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Query an available &#x60;DataObjectInstance&#x60; resource based on specified parameters. Query parameters **dataModelName** and **dataObjectName** as well as **correlationProperties** transfered as request body are used as a query to find a matching data object instance.
   * @param dataModelNamespace Namespace of the data model a data object instance should belong to. (required)
   * @param dataModelName Name of the data model a data object instance should belong to. (required)
   * @param dataObjectName The name of the data object the instance should belong to. (required)
   * @param correlationProperties An array of correlation properties associated with the searched data object instance. (required)
   * @return DataObjectInstanceWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataObjectInstanceWithLinks queryDataObjectInstance(String dataModelNamespace, String dataModelName, String dataObjectName, CorrelationPropertyArray correlationProperties) throws ApiException {
    Object localVarPostBody = correlationProperties;
    
    // verify the required parameter 'dataModelNamespace' is set
    if (dataModelNamespace == null) {
      throw new ApiException(400, "Missing the required parameter 'dataModelNamespace' when calling queryDataObjectInstance");
    }
    
    // verify the required parameter 'dataModelName' is set
    if (dataModelName == null) {
      throw new ApiException(400, "Missing the required parameter 'dataModelName' when calling queryDataObjectInstance");
    }
    
    // verify the required parameter 'dataObjectName' is set
    if (dataObjectName == null) {
      throw new ApiException(400, "Missing the required parameter 'dataObjectName' when calling queryDataObjectInstance");
    }
    
    // verify the required parameter 'correlationProperties' is set
    if (correlationProperties == null) {
      throw new ApiException(400, "Missing the required parameter 'correlationProperties' when calling queryDataObjectInstance");
    }
    
    // create path and map variables
    String localVarPath = "/dataObjectInstances";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataModelNamespace", dataModelNamespace));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataModelName", dataModelName));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataObjectName", dataObjectName));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataObjectInstanceWithLinks> localVarReturnType = new GenericType<DataObjectInstanceWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
