/*
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.swagger.trade.client.jersey.api;

import io.swagger.trade.client.jersey.ApiClient;
import io.swagger.trade.client.jersey.ApiException;
import io.swagger.trade.client.jersey.Configuration;
import io.swagger.trade.client.jersey.Pair;

import io.swagger.trade.client.jersey.model.DataDependencyGraphArrayWithLinks;
import io.swagger.trade.client.jersey.model.DataDependencyGraphData;
import io.swagger.trade.client.jersey.model.DataDependencyGraphWithLinks;
import io.swagger.trade.client.jersey.model.Error;
import io.swagger.trade.client.jersey.model.InvalidInput;
import io.swagger.trade.client.jersey.model.NotFound;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ws.rs.core.GenericType;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-05T17:17:13.418+02:00")
public class DataDependencyGraphApi {
  private ApiClient apiClient;

  public DataDependencyGraphApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DataDependencyGraphApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Creates and adds a new data dependency graph to the TraDE middleware
   * 
   * @param dataDependencyGraphData The name and creating entity of the data dependency graph that will be created. (required)
   * @return DataDependencyGraphWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataDependencyGraphWithLinks addDataDependencyGraph(DataDependencyGraphData dataDependencyGraphData) throws ApiException {
    Object localVarPostBody = dataDependencyGraphData;
    
    // verify the required parameter 'dataDependencyGraphData' is set
    if (dataDependencyGraphData == null) {
      throw new ApiException(400, "Missing the required parameter 'dataDependencyGraphData' when calling addDataDependencyGraph");
    }
    
    // create path and map variables
    String localVarPath = "/dataDependencyGraphs";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataDependencyGraphWithLinks> localVarReturnType = new GenericType<DataDependencyGraphWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Deletes a data dependency graph.
   * Deletes a data dependency graph from the TraDE middleware.
   * @param graphId Id of the data dependency graph that needs to be fetched (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteDataDependencyGraph(String graphId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'graphId' is set
    if (graphId == null) {
      throw new ApiException(400, "Missing the required parameter 'graphId' when calling deleteDataDependencyGraph");
    }
    
    // create path and map variables
    String localVarPath = "/dataDependencyGraphs/{graphId}"
      .replaceAll("\\{" + "graphId" + "\\}", apiClient.escapeString(graphId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
  /**
   * Provides the serialized graph model of the data dependency graph
   * 
   * @param graphId Id of the data dependency graph that needs to be fetched (required)
   * @return byte[]
   * @throws ApiException if fails to make API call
   */
  public byte[] downloadGraphModel(String graphId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'graphId' is set
    if (graphId == null) {
      throw new ApiException(400, "Missing the required parameter 'graphId' when calling downloadGraphModel");
    }
    
    // create path and map variables
    String localVarPath = "/dataDependencyGraphs/{graphId}/serialized-graph"
      .replaceAll("\\{" + "graphId" + "\\}", apiClient.escapeString(graphId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/octet-stream", "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<byte[]> localVarReturnType = new GenericType<byte[]>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Find a data dependency graph by Id
   * 
   * @param graphId Id of the data dependency graph that needs to be fetched (required)
   * @return DataDependencyGraphWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataDependencyGraphWithLinks getDataDependencyGraphDirectly(String graphId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'graphId' is set
    if (graphId == null) {
      throw new ApiException(400, "Missing the required parameter 'graphId' when calling getDataDependencyGraphDirectly");
    }
    
    // create path and map variables
    String localVarPath = "/dataDependencyGraphs/{graphId}"
      .replaceAll("\\{" + "graphId" + "\\}", apiClient.escapeString(graphId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataDependencyGraphWithLinks> localVarReturnType = new GenericType<DataDependencyGraphWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Gets all available &#x60;DataDependencyGraph&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data dependency graph resources and param **targetNamespace**, **name** and **entity** filter result list by name, targetNamespace and entity.
   * @param start Start index of returned collection of resources for pagination. (optional, default to 1)
   * @param size Size of the returned sub-collection of resources for pagination. (optional, default to 50)
   * @param targetNamespace Target namespace of data dependency graph to return (optional)
   * @param name Name of data dependency graph to return (optional)
   * @param entity Creating entity of data dependency graph to return (optional)
   * @return DataDependencyGraphArrayWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataDependencyGraphArrayWithLinks getDataDependencyGraphs(Integer start, Integer size, String targetNamespace, String name, String entity) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/dataDependencyGraphs";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "targetNamespace", targetNamespace));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "entity", entity));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataDependencyGraphArrayWithLinks> localVarReturnType = new GenericType<DataDependencyGraphArrayWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Upload a serialized graph model to the TraDE middleware in order to make it available.
   * 
   * @param graphId Id of the data dependency graph that needs to be fetched (required)
   * @param contentLength The size of the serialized graph model passed as header (required)
   * @param graph The serialized graph model to upload. (required)
   * @throws ApiException if fails to make API call
   */
  public void uploadGraphModel(String graphId, Long contentLength, byte[] graph) throws ApiException {
    Object localVarPostBody = graph;
    
    // verify the required parameter 'graphId' is set
    if (graphId == null) {
      throw new ApiException(400, "Missing the required parameter 'graphId' when calling uploadGraphModel");
    }
    
    // verify the required parameter 'contentLength' is set
    if (contentLength == null) {
      throw new ApiException(400, "Missing the required parameter 'contentLength' when calling uploadGraphModel");
    }
    
    // verify the required parameter 'graph' is set
    if (graph == null) {
      throw new ApiException(400, "Missing the required parameter 'graph' when calling uploadGraphModel");
    }
    
    // create path and map variables
    String localVarPath = "/dataDependencyGraphs/{graphId}/serialized-graph"
      .replaceAll("\\{" + "graphId" + "\\}", apiClient.escapeString(graphId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (contentLength != null)
      localVarHeaderParams.put("Content-Length", apiClient.parameterToString(contentLength));

    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/octet-stream"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };


    apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, null);
  }
}
