/*
 * TraDE Middleware API
 * This is the API of the TraDE middleware.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: trade4chor@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.swagger.trade.client.jersey.api;

import io.swagger.trade.client.jersey.ApiClient;
import io.swagger.trade.client.jersey.ApiException;
import io.swagger.trade.client.jersey.Configuration;
import io.swagger.trade.client.jersey.Pair;
import io.swagger.trade.client.jersey.model.CorrelationPropertyArray;
import io.swagger.trade.client.jersey.model.DataElementInstanceArrayWithLinks;
import io.swagger.trade.client.jersey.model.DataElementInstanceWithLinks;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ws.rs.core.GenericType;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-05T17:17:13.418+02:00")
public class DataElementInstanceApi {
  private ApiClient apiClient;

  public DataElementInstanceApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DataElementInstanceApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * Gets all available &#x60;DataElementInstance&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element instance resources and param **status** filters result list by status of the data element instances.
   * @param start Start index of returned collection of resources for pagination. (optional, default to 1)
   * @param size Size of the returned sub-collection of resources for pagination. (optional, default to 50)
   * @param status Status of data element instances to return (optional)
   * @return DataElementInstanceArrayWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataElementInstanceArrayWithLinks getAllDataElementInstances(Integer start, Integer size, String status) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/dataElementInstances";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataElementInstanceArrayWithLinks> localVarReturnType = new GenericType<DataElementInstanceArrayWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Find a data element instance by Id
   * 
   * @param instanceId Id of the data element instance that needs to be fetched (required)
   * @return DataElementInstanceWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataElementInstanceWithLinks getDataElementInstance(String instanceId) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'instanceId' is set
    if (instanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceId' when calling getDataElementInstance");
    }
    
    // create path and map variables
    String localVarPath = "/dataElementInstances/{instanceId}"
      .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataElementInstanceWithLinks> localVarReturnType = new GenericType<DataElementInstanceWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Get a data element instance from a data object instance by the name of the corresponding data element
   * 
   * @param instanceId Id of the data object instance that needs to be fetched (required)
   * @param dataElementName The name of the data element for which we want to get the instance from the current data object instance (required)
   * @return DataElementInstanceWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataElementInstanceWithLinks getDataElementInstanceByDataElementName(String instanceId, String dataElementName) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'instanceId' is set
    if (instanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceId' when calling getDataElementInstanceByDataElementName");
    }
    
    // verify the required parameter 'dataElementName' is set
    if (dataElementName == null) {
      throw new ApiException(400, "Missing the required parameter 'dataElementName' when calling getDataElementInstanceByDataElementName");
    }
    
    // create path and map variables
    String localVarPath = "/dataObjectInstances/{instanceId}/elementInstances/{dataElementName}"
      .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()))
      .replaceAll("\\{" + "dataElementName" + "\\}", apiClient.escapeString(dataElementName.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataElementInstanceWithLinks> localVarReturnType = new GenericType<DataElementInstanceWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Gets all available &#x60;DataElementInstance&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element instance resources and param **status** filters result list by status of the data element instances.
   * @param instanceId Id of the data object instance that needs to be fetched (required)
   * @param start Start index of returned collection of resources for pagination. (optional, default to 1)
   * @param size Size of the returned sub-collection of resources for pagination. (optional, default to 50)
   * @param status Status of data element instances to return (optional)
   * @return DataElementInstanceArrayWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataElementInstanceArrayWithLinks getDataElementInstances(String instanceId, Integer start, Integer size, String status) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'instanceId' is set
    if (instanceId == null) {
      throw new ApiException(400, "Missing the required parameter 'instanceId' when calling getDataElementInstances");
    }
    
    // create path and map variables
    String localVarPath = "/dataObjectInstances/{instanceId}/elementInstances"
      .replaceAll("\\{" + "instanceId" + "\\}", apiClient.escapeString(instanceId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataElementInstanceArrayWithLinks> localVarReturnType = new GenericType<DataElementInstanceArrayWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Gets all available &#x60;DataElementInstance&#x60; resources. Optional query parameter of **start** and **size** enable pagination of the collection of data element instance resources and param **status** filters result list by status of the data element instances.
   * @param dataElementId Id of the data element that needs to be fetched (required)
   * @param start Start index of returned collection of resources for pagination. (optional, default to 1)
   * @param size Size of the returned sub-collection of resources for pagination. (optional, default to 50)
   * @param status Status of data element instances to return (optional)
   * @return DataElementInstanceArrayWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataElementInstanceArrayWithLinks getDataElementInstancesOfDataElement(String dataElementId, Integer start, Integer size, String status) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'dataElementId' is set
    if (dataElementId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataElementId' when calling getDataElementInstancesOfDataElement");
    }
    
    // create path and map variables
    String localVarPath = "/dataElements/{dataElementId}/instances"
      .replaceAll("\\{" + "dataElementId" + "\\}", apiClient.escapeString(dataElementId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataElementInstanceArrayWithLinks> localVarReturnType = new GenericType<DataElementInstanceArrayWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * Provides a list of all data element instances that use/refer to the data value with the given id. Optional query parameter of **start** and **size** enable pagination of the collection of data element instance resources.
   * 
   * @param dataValueId Id of the data value that needs to be fetched (required)
   * @param start Start index of returned collection of resources for pagination. (optional, default to 1)
   * @param size Size of the returned sub-collection of resources for pagination. (optional, default to 50)
   * @return DataElementInstanceArrayWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataElementInstanceArrayWithLinks getDataElementInstancesUsingDataValue(String dataValueId, Integer start, Integer size) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'dataValueId' is set
    if (dataValueId == null) {
      throw new ApiException(400, "Missing the required parameter 'dataValueId' when calling getDataElementInstancesUsingDataValue");
    }
    
    // create path and map variables
    String localVarPath = "/dataValues/{dataValueId}/elementInstances"
      .replaceAll("\\{" + "dataValueId" + "\\}", apiClient.escapeString(dataValueId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "start", start));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataElementInstanceArrayWithLinks> localVarReturnType = new GenericType<DataElementInstanceArrayWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
  /**
   * 
   * Query an available &#x60;DataElementInstance&#x60; resource based on specified parameters. Query parameters **dataModelName**, **dataObjectName** and **dataElementName** as well as **correlationProperties** transfered as request body are used as a query to find a matching data element instance.
   * @param dataModelNamespace Namespace of the data model a data object instance should belong to. (required)
   * @param dataModelName Name of the data model a data element instance should belong to. (required)
   * @param dataObjectName The name of the data object the instance should belong to. (required)
   * @param dataElementName The name of the data element the instance should belong to. (required)
   * @param correlationProperties An array of correlation properties associated with the searched data element instance. (required)
   * @return DataElementInstanceWithLinks
   * @throws ApiException if fails to make API call
   */
  public DataElementInstanceWithLinks queryDataElementInstance(String dataModelNamespace, String dataModelName, String dataObjectName, String dataElementName, CorrelationPropertyArray correlationProperties) throws ApiException {
    Object localVarPostBody = correlationProperties;
    
    // verify the required parameter 'dataModelNamespace' is set
    if (dataModelNamespace == null) {
      throw new ApiException(400, "Missing the required parameter 'dataModelNamespace' when calling queryDataElementInstance");
    }
    
    // verify the required parameter 'dataModelName' is set
    if (dataModelName == null) {
      throw new ApiException(400, "Missing the required parameter 'dataModelName' when calling queryDataElementInstance");
    }
    
    // verify the required parameter 'dataObjectName' is set
    if (dataObjectName == null) {
      throw new ApiException(400, "Missing the required parameter 'dataObjectName' when calling queryDataElementInstance");
    }
    
    // verify the required parameter 'dataElementName' is set
    if (dataElementName == null) {
      throw new ApiException(400, "Missing the required parameter 'dataElementName' when calling queryDataElementInstance");
    }
    
    // verify the required parameter 'correlationProperties' is set
    if (correlationProperties == null) {
      throw new ApiException(400, "Missing the required parameter 'correlationProperties' when calling queryDataElementInstance");
    }
    
    // create path and map variables
    String localVarPath = "/dataElementInstances";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataModelNamespace", dataModelNamespace));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataModelName", dataModelName));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataObjectName", dataObjectName));
    localVarQueryParams.addAll(apiClient.parameterToPairs("", "dataElementName", dataElementName));

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    GenericType<DataElementInstanceWithLinks> localVarReturnType = new GenericType<DataElementInstanceWithLinks>() {};
    return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
      }
}
